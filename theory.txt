-- THEORY --


Scenario: Predictive maintenance for a Smart HVAC System
------------------------------------
- Goal: Predict when the HVAC system will require maintenance (such as a filter replacement or compressor repair) before a failure occurs. This goes beyond simple threshold checks and leverages AI to analyze complex patterns in time series sensor data.



Why is this interesting?
------------------------------------
- Real-world relevance: HVAC systems are critical for comfort and energy efficiency, and unexpected failures can be costly or disruptive. Predicting maintenance needs proactively is a important practical problem.

- Complexity: The task involves multidimensional, sequential data (e.g., temperature, humidity, pressure over time), which simple if-else rules struggle to interpret effectively.

- AI Advantage: By using machine learning, we can detect subtle, evolving patterns of degradation that aren’t obvious from static thresholds, making the example compelling and serious.



The EXAMPLE in detail
------------------------------------
* Imagine a smart HVAC system equipped with:
	- Sensors: Temperature (°C), humidity (%), and pressure (psi) readings, collected hourly.
	- Maintenance logs: Historical records of when maintenance was performed (e.g., filter changes, repairs).
	- Dataset: A time series of sensor readings over months, labeled with binary outcomes:
		- 1 = maintenance needed within 7 days
		- 0 = no maintenance needed)

* TASK:
- Train an AI model to predict the probability that the HVAC system will need maintenance within the next 7 days, based on a sequence of sensor readings (e.g., the past 24 hours). This requires analyzing temporal patterns—like a gradual pressure drop or humidity spikes—rather than just checking current values.

* COMPLEXITY
- Multidimensional input: The model must consider temperature, humidity, and pressure together, not in isolation.
- Sequential nature: Patterns emerge over time (e.g., a 3-day humidity increase followed by a pressure dip), which if-else rules can’t easily encode.
Prediction horizon: We’re forecasting a future event (maintenance in 7 days), not just classifying the present state.

* SOLUTION
- We’ll use a Long Short-Term Memory (LSTM) network, a type of recurrent neural network (RNN) designed for time series data. 
LSTMs excel at:
	- Remembering long-term dependencies (e.g., a pressure trend over days).
	- Combining multiple features into a cohesive prediction.

- Steps
1. Data Preprocessing
	- Sequence Creation: Convert the time series into overlapping windows (e.g., 24-hour sequences). Each window is an input, and the label is whether maintenance was needed 7 days later.
	- Normalization: Scale the sensor values (e.g., temperature, humidity, pressure) to a range 0 and 1.
2. Model Training
	- Define an LSTM model to process the 24-hour sequences and output a probability (0–1).
	- Train it to minimize prediction error.
3. Prediction
	- Feed a new 24-hour sensor sequence into the model to get a maintenance probability.
	- Example: If the output is 0.85, there’s an 85% chance maintenance will be needed within 7 days.

* REAL-WORLD INTEGRATION
Let's integrate this model into a mobile app which processes sample data and flags a risk for homeowners or facility managers:
- Input: The app receives real-time sensor data from the HVAC system via Bluetooth or Wi-Fi.
- Output: A notification like, “Schedule HVAC maintenance within the next week — 85% risk detected.”
- On-Device AI: Convert the model to Core ML (iOS) or TensorFlow Lite (Android) for fast, offline predictions.



Why not just use if-else statements?
------------------------------------
* Static Rules Miss Subtle Patterns
	- HVAC degradation often shows up as gradual shifts—like a slow rise in pressure combined with fluctuating humidity—rather than hitting a single threshold. If-else logic can’t capture these nuanced, time-dependent trends.
	- Example: A compressor might fail due to a combination of high humidity over weeks and intermittent pressure spikes, which a simple rule like if pressure > X would overlook.

* Lack of Adaptability
	- Every HVAC unit behaves differently based on age, usage, or environment (e.g., coastal vs. desert climates). Hardcoding if-else rules requires constant manual tuning, whereas AI learns and adapts from data.

* No Predictive Power
	- If-else statements react to current conditions (e.g., "It’s broken now"), but they can’t predict future failures based on historical trends. AI can forecast maintenance needs days or weeks ahead, reducing downtime.

By contrast, AI (specifically a model like a Long Short-Term Memory (LSTM) network) can analyze sequences of sensor data, learn from past maintenance events, and predict future risks dynamically. This makes it far more serious and impactful than a basic classification task.



CONCLUSION
------------------------------------
Benefits:
- Handles multidimensional time series data with intricate patterns.
- Provides predictive insights rather than reactive flags.
- Adapts to real-world variability, justifying AI over rigid if-else logic.

AI (Machine Learning) is interesting case because it ties into a tangible IoT problem—keeping HVAC systems running efficiently—and shows how AI can be a game changer in mobile apps.



How it works? => hvac_sensor_dataset_generator.py
* Timestamps:
	- Start at 2024-01-01 00:00 and end at 2024-06-29 23:00, covering 180 days of hourly data (4,320 rows total).
* Temperature:
	- Base value of 21.1°C with a daily cycle (±2.8°C) and random noise (N(0, 1.1)) - mean 0 and standard deviation 1.1.
* Humidity:
	- Base value of 50% with a daily cycle (±10%, phase-shifted) and noise (N(0, 5)) - mean 0 and standard deviation 5.
* Pressure:
	- Base value 300 psi with noise (N(0, 10)) - mean 0 and standard deviation 10.
* Maintenance Events:
	- Randomly selects 5 maintenance events after the first 7 days (from day 8 to day 180).
	- Applies trends over the 7 days before each event:
		-> Temperature increases by up to 5°C.
		-> Humidity increases by up to 15%.
		-> Pressure decreases by up to 100 psi.
* Labels:
	- Label of 1 is assigned to any timestamp where a maintenance event occurs within the next 7 days; otherwise, it’s 0.
* Output:
	- The data is stored in a pandas DataFrame and saved to hvac_sensor_data_180_days.csv.
	- A success message and the first 5 rows are printed for verification.

Example output:
---------------
timestamp,temperature,humidity,pressure,maintenance_label
2023-01-01 00:00:00,68.1234,45.6789,297.5432,0
2023-01-01 01:00:00,69.4567,46.2345,301.8765,0
2023-01-01 02:00:00,70.7890,47.8901,299.1234,0
2023-01-01 03:00:00,71.2345,49.5678,302.4567,0
2023-01-01 04:00:00,71.8901,51.2345,298.7890,0

timestamp,temperature,humidity,pressure,maintenance_label
2023-01-01 00:00:00,68.1234,45.6789,297.5432,1
2023-01-01 01:00:00,69.4567,46.2345,301.8765,1
2023-01-01 02:00:00,70.7890,47.8901,299.1234,1
2023-01-01 03:00:00,71.2345,49.5678,302.4567,1
2023-01-01 04:00:00,71.8901,51.2345,298.7890,1


Understanding the Maintenance Label
The maintenance_label tells us whether maintenance is required based on upcoming maintenance events:

Label = 0: No maintenance event is scheduled within the next 7 days from that timestamp.
Label = 1: A maintenance event is scheduled to occur within the next 7 days from that timestamp.
In other words, the label looks ahead 7 days from each timestamp to check if maintenance is coming up. If nothing is scheduled in that window, it’s 0. If something is scheduled, it’s 1.

Simple Rule to Remember
For any timestamp in data:
If the label is 0: No maintenance is coming up in the next 7 days.
If the label is 1: Maintenance is scheduled sometime in the next 7 days.



